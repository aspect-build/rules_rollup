load("//rollup/private:versions.bzl", "TOOL_VERSIONS")


_DOC = "Fetch external tools needed for rollup toolchain"
_ATTRS = {
    "rollup_version": attr.string(),
}

def _rollup_repo_impl(repository_ctx):
    repository_ctx.symlink(Label("//rollup/private:run_rollup.js"), "run_rollup.js")

    # Base BUILD file for this repository
    repository_ctx.file("BUILD.bazel", """
# Generated by aspect_rules_rollup/rollup/repositories.bzl
load("@aspect_rules_js//js:js_binary.bzl", "js_binary")
load("@aspect_rules_rollup//rollup/private/versions/{version}:node_modules.bzl", "node_modules")
node_modules()
js_binary(
    name = "{name}",
    data = ["//:npm__rollup"],
    entry_point = "run_rollup.js",
    visibility = ["//visibility:public"],
)
""".format(
        name = repository_ctx.attr.name,
        version = repository_ctx.attr.rollup_version,
    ))

rollup_repositories = repository_rule(
    _rollup_repo_impl,
    doc = _DOC,
    attrs = _ATTRS,
)

# Wrapper macro around everything above, this is the primary API
def rollup_register_toolchains(name = "rollup", rollup_version = "v2.70.2", **kwargs):
    """Convenience macro for users which does typical setup.
    Users can avoid this macro and do these steps themselves, if they want more control.
    Args:
        name: base name for all created repos, like "rollup"
        rollup_version: a version which is mirrored into rules_rollup
        **kwargs: passed to each node_repositories call
    """
    if rollup_version not in TOOL_VERSIONS.keys():
        fail("""
rollup version {} is not currently mirrored into rules_rollup.
Please instead choose one of these available versions: {}""".format(rollup_version, TOOL_VERSIONS.keys()))

    TOOL_VERSIONS[rollup_version]()

    rollup_repositories(
        name = name,
        rollup_version = rollup_version,
    )