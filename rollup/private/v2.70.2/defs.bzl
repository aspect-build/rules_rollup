"@generated by @aspect_rules_js//js/private:translate_pnpm_lock.bzl from pnpm lock file @//:pnpm-lock.yaml"

load("@aspect_rules_js//js/private:pnpm_utils.bzl", _pnpm_utils = "pnpm_utils")
load("@bazel_skylib//lib:paths.bzl", _paths = "paths")
load("@npm__rollup__2.70.2__links//:link_js_package.bzl", link_1 = "link_js_package")

# buildifier: disable=unnamed-macro
def link_js_packages():
    "Generated list of link_js_package() target generators and first party linked packages corresponding to the packages in @//:pnpm-lock.yaml"
    root_path = ""
    importer_paths = ["."]
    is_root = native.package_name() == root_path
    is_direct = False
    for import_path in importer_paths:
        importer_package_path = _paths.normalize(_paths.join(root_path, import_path))
        if importer_package_path == ".":
            importer_package_path = ""
        if importer_package_path == native.package_name():
            is_direct = True
    if not is_root and not is_direct:
        msg = "The link_js_packages() macro loaded from @npm//:defs.bzl and called in bazel package '%s' may only be called in the bazel package(s) corresponding to the root package '' and packages corresponding to importer paths ['.']" % native.package_name()
        fail(msg)

    link_1(False)

def package(name, import_path = "."):
    package_path = _paths.normalize(_paths.join("", import_path))
    if package_path == ".":
        package_path = ""
    return Label("@//{package_path}:jsp__{bazel_name}".format(
        package_path = package_path,
        bazel_name = _pnpm_utils.bazel_name(name),
    ))

def package_dir(name, import_path = "."):
    package_path = _paths.normalize(_paths.join("", import_path))
    if package_path == ".":
        package_path = ""
    return Label("@//{package_path}:jsp__{bazel_name}__dir".format(
        package_path = package_path,
        bazel_name = _pnpm_utils.bazel_name(name),
    ))
