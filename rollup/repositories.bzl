"""Declare runtime dependencies

These are needed for local dev, and users must install them as well.
See https://docs.bazel.build/versions/main/skylark/deploying.html#dependencies
"""

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")
load("//rollup/private:versions.bzl", "TOOL_VERSIONS")

# WARNING: any changes in this function may be BREAKING CHANGES for users
# because we'll fetch a dependency which may be different from one that
# they were previously fetching later in their WORKSPACE setup, and now
# ours took precedence. Such breakages are challenging for users, so any
# changes in this function should be marked as BREAKING in the commit message
# and released only in semver majors.
def rules_rollup_dependencies():
    # The minimal version of bazel_skylib we require
    maybe(
        http_archive,
        name = "bazel_skylib",
        sha256 = "c6966ec828da198c5d9adbaa94c05e3a1c7f21bd012a0b29ba8ddbccb2c93b0d",
        urls = [
            "https://github.com/bazelbuild/bazel-skylib/releases/download/1.1.1/bazel-skylib-1.1.1.tar.gz",
            "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.1.1/bazel-skylib-1.1.1.tar.gz",
        ],
    )

    maybe(
        http_archive,
        name = "aspect_bazel_lib",
        sha256 = "2f6f04a002a9f988ae79107a91a8498892fb03bee978a8bf841eb1bd9fded2ea",
        strip_prefix = "bazel-lib-0.9.8",
        url = "https://github.com/aspect-build/bazel-lib/archive/refs/tags/v0.9.8.tar.gz",
    )

    maybe(
        http_archive,
        name = "aspect_rules_js",
        sha256 = "e5de2d6aa3c6987875085c381847a216b1053b095ec51c11e97b781309406ad4",
        strip_prefix = "rules_js-0.5.0",
        url = "https://github.com/aspect-build/rules_js/archive/refs/tags/v0.5.0.tar.gz",
    )

_DOC = "Fetch external tools needed for rollup toolchain"
_ATTRS = {
    "rollup_version": attr.string(),
}

def _rollup_repo_impl(repository_ctx):
    repository_ctx.symlink(Label("//rollup/private:run_rollup.js"), "run_rollup.js")

    # Base BUILD file for this repository
    repository_ctx.file("BUILD.bazel", """
# Generated by aspect_rules_rollup/rollup/repositories.bzl
load("@aspect_rules_js//js:defs.bzl", "js_binary")
load("@aspect_rules_rollup//rollup/private:{version}/node_modules.bzl", "node_modules")
node_modules()
js_binary(
    name = "{name}",
    data = ["//:np__rollup"],
    entry_point = "run_rollup.js",
    visibility = ["//visibility:public"],
)
""".format(
        name = repository_ctx.attr.name,
        version = repository_ctx.attr.rollup_version,
    ))

rollup_repositories = repository_rule(
    _rollup_repo_impl,
    doc = _DOC,
    attrs = _ATTRS,
)

# Wrapper macro around everything above, this is the primary API
def rollup_register_toolchains(name = "rollup", rollup_version = "v2.70.2", **kwargs):
    """Convenience macro for users which does typical setup.

    Users can avoid this macro and do these steps themselves, if they want more control.
    Args:
        name: base name for all created repos, like "rollup"
        rollup_version: a version which is mirrored into rules_rollup
        **kwargs: passed to each node_repositories call
    """
    if rollup_version not in TOOL_VERSIONS.keys():
        fail("""
rollup version {} is not currently mirrored into rules_rollup.
Please instead choose one of these available versions: {}""".format(rollup_version, TOOL_VERSIONS.keys()))

    TOOL_VERSIONS[rollup_version]()

    rollup_repositories(
        name = name,
        rollup_version = rollup_version,
    )
